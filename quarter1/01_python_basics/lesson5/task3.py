# 3. Есть два списка:
# tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
# classes = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
# Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <class>), например:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ...
# Количество генерируемых кортежей не должно быть больше длины списка tutors. Если в списке classes меньше элементов,
# чем в списке tutors, необходимо вывести последние кортежи в виде: (<tutor>, None), например:
# ('Станислав', None)
#
# Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения. Подумать, в каких ситуациях
# генератор даст эффект.

# Решение: Написал генератор, который возвращает кортежи, список с классами умышленно опловинил
# В доказательство вышесказанного, программа выводит:
# - тип функции/генератора <class 'generator'>
# - тип элемента <class 'tuple'>
# в цикле вывода намеренно добавил единицу для провоцирования ошибки исчерпания и сообщение с предупреждением

# Одно не совсем понятно, почему в редких случаях ошибка исчерпания вылазит в самом начале?
#   C:\Users\...\python.exe C:/Users/.../PycharmProjects/June_1/q1_l5_hw/task3.py
#   Traceback (most recent call last):
#     File "C:\Users\...\PycharmProjects\June_1\q1_l5_hw\task3.py", line 44, in <module>
#       el = next(class_tutors)
#   StopIteration
#   Тип источника:  <class 'generator'>
#   Тип элемента:  <class 'tuple'>
#   ('Иван', '9А')...
# Проверял в терминале, ошибка возникает в нужном месте.
# Подозреваю, что не совсем корректно отрабатывает PyCharm (как будто не сбрасывает состояние генратора)


tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
classes = ['9А', '7В', '9Б', '9В']  # , '8Б', '10А', '10Б', '9А'


def get_class_tutors():
    for i_tutor in tutors:
        idx = tutors.index(i_tutor)
        if idx in range(0, len(classes)):
            i_class = classes[idx]
        else:
            i_class = None
        result = (i_tutor, i_class)  # запишем в кортеж
        yield result


class_tutors = get_class_tutors()
print('Тип источника: ', type(class_tutors))

# for i in range(0, len(tutors)):  # Вариант без провоцирования ошибки исчерпания
for i in range(0, len(tutors) + 1):  # добавил единицу для провоцирования ошибки исчерпания
    if i == len(tutors):
        print('Сейчас будет ошибка "StopIteration"')

    el = next(class_tutors)

    if i == 0:
        print('Тип элемента: ', type(el))
    print(el)
