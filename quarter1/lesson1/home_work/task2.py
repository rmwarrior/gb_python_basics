# Урок 1.
# Задание 2.
# Создать список, состоящий из кубов нечётных чисел от 0 до 1000:
# a. Вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7.
# Например, число «19 ^ 3 = 6859» будем включать в сумму, так как 6 + 8 + 5 + 9 = 28 – делится нацело на 7.
# Внимание: использовать только арифметические операции!
# b. К каждому элементу списка добавить 17 и заново вычислить сумму тех чисел из этого списка,
# сумма цифр которых делится нацело на 7. Внимание: новый список не создавать!!!
#
# Решение: Программа вычисляет кубы и сохраняет в список.
# Затем делает два прохода по списку: первый раз для пункта "a" задачи, второй - для пункта "b" или "c"
# При первом проходе берём сохранённое значение куба из списка, считаем сумму цифр, и если она делится на 7 складываем
# в переменную. После прохода по списку, выводим полученную сумму.
# При втором проходе берём сохранённое значение куба из списка, увеличиваем его значение на 17, считаем сумму цифр,
# и если она делится на 7 складываем в переменную. После прохода по списку, выводим полученную сумму.
#       Дата  Автор
# 2021.06.06  мальчик Денис, 43 годика

# Определим используемые константы

MAX_VAL = 1000

cube_values = []  # список для хранения кубов нечётных чисел 0..1000

# вычислим кубы и сохраним
# так как нам нужны только нечётные числа, начнем с минимального, которое нам подходит, т. е. с 1 и с шагом 2
for i in range(1, MAX_VAL, 2):
    # вычислим куб, расширим список и сохраним значение
    cube_values.append(i**3)

sum_7 = 0  # Переменная для сохранения суммы кубов

level = 0  # пункт в задаче: 0 - пункт "a", 1 - пункт "b"
# выполним оба по очереди, если level = 0, то берём кубы, иначе - кубы, увеличенные на 17
while level < 2:
    # пробежимся по списку кубов, сформированному вначале
    for i in range(0, len(cube_values)):
        # сначала сумма цифр =0
        sum_digit = 0
        # если level = 0, то берём кубы, иначе - кубы, увеличенные на 17
        cube_value = cube_values[i]
        if level > 0:
            cube_value = cube_value + 17
        # (для тестирования) найдем сумму цифр через строку
        # str_val = str(cube_value)
        # for j in range(0, len(str_val)):
        #     sum_digit = sum_digit + int(str_val[j])

        # найдем сумму цифр куба (или куба + 17)
        rank = 1  # коэффициент: 1-единицы, 10-десятки, 100-сотни
        while cube_value > rank:
            digit_val = (cube_value % (rank * 10)) // rank
            sum_digit = sum_digit + digit_val
            rank = rank * 10  # коэффициент: 1-единицы, 10-десятки, 100-сотни

        # если сумма цифр делится на 7, добавим к сумме кубов (или кубов + 17)
        if (sum_digit > 0) and (sum_digit % 7 == 0):
            sum_7 = sum_7 + cube_value

        # print(f'i={i}, cube={cube_value}, sum_digit={sum_digit}, sum_7={sum_7}')
        # i=499, cube=997002999, sum_digit=54, sum_7=17485588610
        # i=499, cube=997003016, sum_digit=35, sum_7=15392909930
    # Выведем сумму на экран
    if level == 0:
        print('a. Сумма кубов, сумма цифр которых делится на 7: ' + str(sum_7))
    else:
        print('b. Сумма кубов увеличенных на 17, и сумма цифр которых делится на 7: ' + str(sum_7))

    # Очистим сумму для следующего прохода
    sum_7 = 0
    level += 1
